doctype html
head
  title Video Compositions
  style
    include style.css
  script(
    src='https://cdn.socket.io/3.1.3/socket.io.min.js'
    integrity='sha384-cPwlPLvBTa3sKAgddT6krw0cJat7egBga3DJepJyrLl4Q9/5WLra3rrnMcyTyOnh'
    crossorigin='anonymous'
  )

body.app
  h1 Video Compositions
  div#statusUpdate

  h2 Rooms with Compositions
  table
    tr
      th Room Name
      th Duration
      th Actions
    if rooms
      each room in rooms
        if room.compositions && room.compositions.length
          tr
            td= room.name
            td #{new Date(room.duration * 1000).toISOString().substr(11, 8)}
            td
              each composition in room.compositions
                li
                  button(class='button' value=`/compositions/${composition.sid}/view`) View
                  button(class='button' value=`/compositions/${composition.sid}/download`) Download
                  button(class='button compositionAction' value=`/compositions/${composition.sid}/delete` ) Delete
  h2 Recent Rooms with Recordings
  table
    tr
      th Room Name
      th Duration
      th Actions
    if rooms.length
      each room in rooms
        tr
          td= room.name
          td #{new Date(room.duration * 1000).toISOString().substr(11, 8)}
          td
            button(class='button compositionAction' value=`/compose/${room.sid}` ) Compose

script.
  addEventListener('click', async (event) => {
    if (event.target.classList.contains('compositionAction')) {
        event.preventDefault();
        await fetch(event.target.value);
    }
  });

  const socket = io();

  socket.on('status-update', async (status) => {
    let statusText;

    switch (status) {
      case 'composition-request':
        statusText = 'Sent request for composition. ✉️';
        loading = true;
        break

      case 'composition-started':
        statusText = 'Composition has begun! 😄';
        loading = true;
        break

      case 'composition-available':
        statusText = 'Your composition is now available! 🎉 Reloading in 3 seconds...'
        loading = false;
        break

      case 'composition-progress':
        statusText = `Working... 🚧`
        loading = true;
        break

      case 'composition-failed':
        statusText = 'Composition has failed. 😞'
        loading = false;
        break

      case 'composition-deleted':
        statusText = 'Composition deleted. ✅ Reloading in 3 seconds...'
        loading = false;
    }

    const statusUpdate = document.getElementById('statusUpdate');
    statusUpdate.innerText = statusText;

    if (status === 'composition-available' || status === 'composition-deleted') {
      setTimeout(() => {
        location.reload();
      }, 3000);
    }
  });
